# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

exec_always mkdir /tmp/sway-log
exec mkdir /home/taham/.config/sway/data

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term kitty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu /home/taham/.config/sway/scripts/menu.sh

### Output configuration
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
# exec swayidle -w \\
#          timeout 300 'swaylock -f -c 000000' \\
#          timeout 600 'swaymsg "output * power off"' resume 'swaymsg "output * power on"' \\
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c exec /home/taham/.config/sway/scripts/close-background-tasks.sh ; reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -B 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left fullscreen disable; focus left
    bindsym $mod+$down fullscreen disable; focus down
    bindsym $mod+$up fullscreen disable; focus up
    bindsym $mod+$right fullscreen disable; focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "󰳂 resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $up resize grow height 10px
    bindsym $down resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym $mod+r mode "default"
}
bindsym $mod+r mode "󰳂 resize"


include /etc/sway/config.d/*

## Custom config

set $mod2 Mod1
workspace number 4

## Applications to run on startup

exec aw-qt --no-gui

## Brightness Controls
bindsym $mod+i exec /home/taham/.config/sway/scripts/increase_brightness.sh
bindsym $mod+u exec /home/taham/.config/sway/scripts/decrease_brightness.sh

## Screenshot Controls
bindsym $mod+Shift+s exec $XDG_CONFIG_HOME/sway/scripts/area-screen-shot.sh
bindsym $mod+Shift+w exec $XDG_CONFIG_HOME/sway/scripts/full-screen-shot.sh

## Screenrecord Controls
bindsym $mod+Shift+r exec /home/taham/.config/sway/scripts/start-stop-recording.sh 2> /tmp/sway-log/start-stop-recording.log

## Process Monitor (task manager)
bindsym $mod+Shift+p exec foot --app-id="process_monitor_terminal" --title "Connecting..." sh -c "btop"
for_window [app_id="process_monitor_terminal"] floating enable, sticky enable, resize set 1356px 708px, move position 0px 0px

# Widgets

## Sticky Notes

exec foot --config="$XDG_CONFIG_HOME/foot/stickyfoot.ini" --app-id="stickynote-terminal" --title="Sticky Notes" /home/taham/Notes/Sticky/activate_notes.sh
for_window [app_id="stickynote-terminal"] move window to workspace number 4, fullscreen enable

mode "🚀launcher" {
    bindsym $mod+$mod2+l mode "default"

    # Rerun Notes
    bindsym n exec foot --config="$XDG_CONFIG_HOME/foot/stickyfoot.ini" --app-id="stickynote-terminal" --title="Sticky Notes" /home/taham/Notes/Sticky/activate_notes.sh
}

bindsym $mod+$mod2+l mode "🚀launcher"

mode "⚠️danger" {
    
    bindsym $mod+Shift+d mode "default"

    bindsym r exec reboot
    bindsym p exec poweroff
}

bindsym $mod+Shift+d mode "⚠️danger"


mode "󰥔 clock" {
    bindsym $mod+c mode "default"

    bindsym Space exec /home/taham/.config/sway/scripts/toggle-stopwatch.sh 2> /tmp/sway-log/toggle-stopwatch.log
    bindsym c exec /home/taham/.config/sway/scripts/clear-clock.sh 2> /tmp/sway-log/clear-clock.log
    bindsym x exec rm -rf /tmp/epoch_of_timer.txt
    bindsym t exec /home/taham/.config/sway/scripts/start-timer.sh 2> /tmp/sway-log/start-timer.log

}

 for_window [title="timer-input.*"] floating enable, sticky enable

bindsym $mod+c mode "󰥔 clock"

mode "󱚾 network" {
    bindsym $mod+Shift+n mode "default"

    bindsym c exec /home/taham/.config/sway/scripts/wifi-connect.sh
    bindsym r exec /home/taham/.config/sway/scripts/wifi-rescan-connect.sh
    bindsym d exec /home/taham/.config/sway/scripts/connection-down.sh
    bindsym u exec /home/taham/.config/sway/scripts/connection-up.sh
}

bindsym $mod+Shift+n mode "󱚾 network" 

## Styling Windows

default_border pixel 2
default_floating_border pixel 2
titlebar_border_thickness 0
titlebar_padding 3

gaps inner 5

font pango:Iosevka Nerd Font 11.5

set $active-border   #aa66ff
set $inactive-border #111111
set $active-title    #aa66ffbb
set $inactive-title  #000000bb

# Syntax
#class           border           bg              text    indicator chlid_border
client.focused   $active-border   $active-title   #000000 #2e9ef4   $active-border
client.unfocused $inactive-border $inactive-title #ffffff #484e50   $inactive-border


## wallpaper 
output * bg /home/taham/.config/sway/background.jpeg fill

mode " mouse" {
    ## IMPORTANT! Keybinding to escape mousemode
    ## Modifying repeat_delay back to what it was
    bindsym $mod+m input 'type:keyboard' repeat_delay 300, mode "default"

    set $min_slow 2
    set $max_slow 10
    set $slow_accelration 1
   
    set $min_average 5
    set $max_average 30
    set $average_accelration 4

    set $min_fast 10
    set $max_fast 60
    set $fast_accelration 6

    set $accelrate_script /home/taham/.config/sway/scripts/accelrate.sh
    set $speed_path /home/taham/.config/sway/data/speed

    ## Clicks
    bindsym u exec ydotool click 0x40
    bindsym --release u exec ydotool click 0x80
    bindsym i exec ydotool click 0x41
    bindsym --release i exec ydotool click 0x81
    bindsym m exec ydotool click 0x42
    bindsym --release m exec ydotool click 0x82


    # This is neccesary or otherwise you can't shift / ctrl click, cause on pressing shift you can't click
    # I have not implemented (Alt is Mod1) Shift+Alt, Ctrl+Alt, Shift+Ctrl+Alt, you can implement them if you need them
    bindsym Shift+u exec ydotool click 0x40 
    bindsym --release Shift+u exec ydotool click 0x80
    bindsym Shift+i exec ydotool click 0x41
    bindsym --release Shift+i exec ydotool click 0x81
    bindsym Shift+m exec ydotool click 0x42
    bindsym --release Shift+m exec ydotool click 0x82

    bindsym Ctrl+u exec ydotool click 0x40
    bindsym --release Ctrl+u exec ydotool click 0x80
    bindsym Ctrl+i exec ydotool click 0x41
    bindsym --release Ctrl+i exec ydotool click 0x81
    bindsym Ctrl+m exec ydotool click 0x42
    bindsym --release Ctrl+m exec ydotool click 0x82

    bindsym Ctrl+Shift+u exec ydotool click 0x40
    bindsym --release Ctrl+Shift+u exec ydotool click 0x80
    bindsym Ctrl+Shift+i exec ydotool click 0x41
    bindsym --release Ctrl+Shift+i exec ydotool click 0x81
    bindsym Ctrl+Shift+m exec ydotool click 0x42
    bindsym --release Ctrl+Shift+m exec ydotool click 0x82

    # Mod1 is alt
    bindsym Mod1+u exec ydotool click 0x40
    bindsym --release Alt+u exec ydotool click 0x80
    bindsym Mod1+i exec ydotool click 0x41
    bindsym --release Alt+i exec ydotool click 0x81
    bindsym Mod1+m exec ydotool click 0x42
    bindsym --release Alt+m exec ydotool click 0x82

    ## Average speed movement
    # bindsym h exec ydotool mousemove -x -$average -y 0
    bindsym h exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y 0"
    bindsym --release h exec echo $min_average > $speed_path
    bindsym j exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y $speed"
    bindsym --release j exec echo $min_average > $speed_path
    bindsym k exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y -$speed"
    bindsym --release k exec echo $min_average > $speed_path
    bindsym l exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y 0"
    bindsym --release l exec echo $min_average > $speed_path
    ## Diagnol movements
    bindsym n exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y $speed"
    bindsym --release n exec echo $min_average > $speed_path
    bindsym Period exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y $speed"
    bindsym --release Period exec echo $min_average > $speed_path
    bindsym y exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y -$speed"
    bindsym --release y exec echo $min_average > $speed_path
    bindsym o exec "$accelrate_script $max_average $average_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y -$speed"
    bindsym --release o exec echo $min_average > $speed_path

    ## Slow movements
    bindsym Shift+h exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y 0"
    bindsym --release Shift+h exec echo $min_slow > $speed_path
    bindsym Shift+j exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y $speed"
    bindsym --release Shift+j exec echo $min_slow > $speed_path
    bindsym Shift+k exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y -$speed"
    bindsym --release Shift+k exec echo $min_slow > $speed_path
    bindsym Shift+l exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y 0"
    bindsym --release Shift+l exec echo $min_slow > $speed_path
    bindsym Shift+n exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y $speed"
    bindsym --release Shift+n exec echo $min_slow > $speed_path
    bindsym Shift+Period exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y $speed"
    bindsym --release Shift+Period exec echo $min_slow > $speed_path
    bindsym Shift+y exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y -$speed"
    bindsym --release Shift+y exec echo $min_slow > $speed_path
    bindsym Shift+o exec "$accelrate_script $max_slow $slow_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y -$speed"
    bindsym --release Shift+o exec echo $min_slow > $speed_path

    ## Fast movements
    bindsym Ctrl+h exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y 0"
    bindsym --release Ctrl+h exec echo $min_fast > $speed_path
    bindsym Ctrl+j exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y $speed"
    bindsym --release Ctrl+j exec echo $min_fast > $speed_path
    bindsym Ctrl+k exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x 0 -y -$speed"
    bindsym --release Ctrl+k exec echo $min_fast > $speed_path
    bindsym Ctrl+l exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y 0"
    bindsym --release Ctrl+l exec echo $min_fast > $speed_path
    bindsym Ctrl+n exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y $speed"
    bindsym --release Ctrl+n exec echo $min_fast > $speed_path
    bindsym Ctrl+Period exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y $speed"
    bindsym --release Ctrl+Period exec echo $min_fast > $speed_path
    bindsym Ctrl+y exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x -$speed  -y -$speed"
    bindsym --release Ctrl+y exec echo $min_fast > $speed_path
    bindsym Ctrl+o exec "$accelrate_script $max_fast $fast_accelration; read speed < $speed_path; ydotool mousemove -x $speed  -y -$speed"
    bindsym --release Ctrl+o exec echo $min_fast > $speed_path

    ## Scrolling
    bindsym $mod+h exec ydotool mousemove --wheel -x 1 -y 0 
    bindsym $mod+j exec ydotool mousemove --wheel -x 0 -y -1
    bindsym $mod+k exec ydotool mousemove --wheel -x 0 -y 1
    bindsym $mod+l exec ydotool mousemove --wheel -x -1 -y 0 

}

## repeat_delay of keys is modified cause you don't want delay in moving your mouse
bindsym $mod+m input "type:keyboard" repeat_delay 50, mode " mouse"

# Prayer scripts for bar
exec_always /home/taham/.config/sway/scripts/update-prayer-data.sh 2> /tmp/sway-log/update-prayer-data.log &

exec_always /home/taham/.config/sway/scripts/coming-prayer-event.py 2> /tmp/sway-log/coming-prayer-event.log &

# Fasting script for bar
exec_always /home/taham/.config/sway/scripts/update-fasting-status.sh 2> /tmp/sway-log/update-fasting-status.log &


# stop adhan
bindsym $mod+p exec pkill -f ".*vlc \-I dummy.*sway/data/azan1.mp3"

# Bar
bar {
    swaybar_command swaybar 

    position top
    status_padding 5
    gaps 5

    colors {
        statusline #e0c0ff
        background #080022cc
        inactive_workspace #00000000 #000000cc #5c5c5cff
        separator #aa55ff
        active_workspace #00000000 #bb55ff66 #111111bb
        focused_workspace #00000000 #bb55ff #000000cc
        binding_mode #080022cc #080022cc #bb77ff
        # binding_mode #6666ff #6666ff #000000cc
    }

    tray_bindsym button1 Activate

    status_command /home/taham/.config/sway/scripts/status.sh

}

# Notifications

exec swaync

bindsym $mod+n exec swaync-client -t -sw

# Keyboard settings

input "type:keyboard" {
    repeat_delay 300
    xkb_layout us,ara-ph
    xkb_options lv3:caps_switch,grp:rctrl_toggle,keypad:pointerkeys
}


